class Graph(object):

    def __init__(self, vertices, adjacency_matrix):
        self.v = len(adjacency_matrix)
        self.graph = adjacency_matrix

    # check: does any neigbor of v have the same color?
    def colorPossible(self, v, colour, c) -> bool:
        for i in range(self.v):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True

    # color graph recursively
    # mind the 0 in color_idx!
    def colorGraphHelper(self, m, color_idx, v):
        if v == self.v:
            return True

        for c in range(1, m + 1):
            if self.colorPossible(v, color_idx, c) is True:
                color_idx[v] = c
                if self.colorGraphHelper(m, color_idx, v + 1) is True:
                    return True
                color_idx[v] = 0
        return False

    def colorGraph(self, colors):
        # auxilary data structure - is filled recursively
        color_idxs = [0] * self.v
        if self.colorGraphHelper(len(colors), color_idxs, 0) is False:
            print("Sadly, there is no solution to this graph.")
            return False
        else:
            # Print the solution
            print("Solution for the graph coloring problem on graph" + str(graph.graph) + ":")
            for vertix, c in enumerate(color_idxs):
                print(str(vertix) + ": " + colors[c - 1])

            return True


if __name__ == '__main__':
    example_colors = ["blue", "purple", "pink"]
    example_adjacency_matrix = [
        [0, 1, 1, 1],
        [1, 0, 1, 0],
        [1, 1, 0, 1],
        [1, 0, 1, 0]]

    graph = Graph(len(example_adjacency_matrix), example_adjacency_matrix)

    graph.colorGraph(example_colors)
